name: Deploy

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Ensure CI passed
      uses: actions/github-script@v6
      id: ci-status
      with:
        script: |
          const { data: checkRuns } = await github.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
          });
          const failedCheckRuns = checkRuns.check_runs.filter(check => check.conclusion !== 'success');
          if (failedCheckRuns.length > 0) {
            throw new Error(`CI checks failed for commit: ${context.sha}`);
          }

    - name: Extract version from release tag
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Update version in Cargo.toml
      run: |
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git commit -am "Bump version to $VERSION"
        git push origin main

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: publish
    if: failure()
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Delete GitHub release
      uses: actions/github-script@v6
      with:
        script: |
          const release_id = await github.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: process.env.VERSION,
          }).then(res => res.data.id);
          await github.repos.deleteRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release_id,
          });

    - name: Delete GitHub tag
      run: |
        git tag -d ${{ env.VERSION }}
        git push origin :refs/tags/${{ env.VERSION }}
